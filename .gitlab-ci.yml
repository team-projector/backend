image: docker:latest

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TEST_IMAGE: ${CI_REGISTRY_IMAGE}:_${CI_COMMIT_REF_NAME}
  DOCKER_DEV_IMAGE: ${CI_REGISTRY_IMAGE}:dev
  DOCKER_PROD_IMAGE: ${CI_REGISTRY_IMAGE}:prod
  GIT_STRATEGY: none

services:
  - docker:dind

stages:
  - quality
  - build
  - test
  - publish
  - deploy

quality:
  image: junte/python-quality
  stage: quality
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
  script:
    - make check_quality

build:
  stage: build
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build -t $DOCKER_TEST_IMAGE -f docker/Dockerfile .
    - docker push $DOCKER_TEST_IMAGE

test:
  image: $DOCKER_TEST_IMAGE
  stage: test
  variables:
    DJANGO_ENV: 'test'
  services:
    - postgres
  script:
    - cd /var/www
    - pip install coverage
    - coverage run manage.py test -v 2 --debug-mode
    - coverage report -m > coverage.log
    - cat coverage.log | tail -n 1
    - coverage html -d ${CI_PROJECT_DIR}/coverage
    - mv coverage.* $CI_PROJECT_DIR
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    paths:
      - coverage
      - coverage.log

pages:
  stage: publish
  dependencies:
    - test
  script:
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master

publish-dev:
  stage: publish
  dependencies: []
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $DOCKER_TEST_IMAGE
    - docker tag $DOCKER_TEST_IMAGE $DOCKER_DEV_IMAGE
    - docker push $DOCKER_DEV_IMAGE
  only:
    - master

.publish-prod:
  stage: publish
  dependencies: []
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $DOCKER_TEST_IMAGE
    - docker tag $DOCKER_TEST_IMAGE $DOCKER_PROD_IMAGE
    - docker push $DOCKER_PROD_IMAGE
  only:
    - prod

deploy-dev:
  stage: deploy
  image: junte/ssh-agent
  dependencies: []
  variables:
    SSH_PRIVATE_KEY: $SSH_DEV_PRIVATE_KEY
  script:
    - ssh deploy@${DEV_HOST} "/opt/deploy/deploy.sh"
  environment:
    name: dev
    url: https://${DEV_HOST}/admin/
  only:
    - master
