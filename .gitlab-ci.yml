image: docker:latest

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TEST_IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID
  GIT_STRATEGY: none

services:
  - docker:dind

stages:
  - quality
  - locale-check
  - build
  - test
  - publish
  - deploy

quality:
  image: junte/python-quality
  stage: quality
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
  script:
    - make check_quality

locale-check:
  image: junte/locale-check
  stage: locale-check
  variables:
    CHECK_PATH: locale


build:
  stage: build
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $DOCKER_TEST_IMAGE -t $CI_REGISTRY_IMAGE:latest -f deploy/Dockerfile .
    - docker push $DOCKER_TEST_IMAGE
    - docker push $CI_REGISTRY_IMAGE:latest

test:
  image: $DOCKER_TEST_IMAGE
  stage: test
  variables:
    DJANGO_ENV: test
  services:
    - postgres
  script:
    - cd /app
    - pip install pytest-django pytest-xdist pytest-cov factory-boy httpretty
    - pytest -n auto --dist=loadscope --cov=apps --cov-report=html:coverage_html
    - mkdir $CI_PROJECT_DIR/coverage
    - coverage report -m > $CI_PROJECT_DIR/coverage/report.log
    - cat $CI_PROJECT_DIR/coverage/report.log | tail -n 1
    - mv coverage_html $CI_PROJECT_DIR/coverage/html
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    paths:
      - coverage

publish-dev:
  stage: publish
  dependencies: []
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $DOCKER_TEST_IMAGE
    - docker tag $DOCKER_TEST_IMAGE $DOCKER_IMAGE
    - docker tag $DOCKER_TEST_IMAGE $CI_REGISTRY_IMAGE:dev
    - docker push $DOCKER_IMAGE
    - docker push $CI_REGISTRY_IMAGE:dev
  only:
    - master

deploy-dev:
  stage: deploy
  image: junte/ssh-agent
  dependencies: []
  variables:
    SSH_PRIVATE_KEY: $SSH_DEV_PRIVATE_KEY
  script:
    - ssh deploy@${DEV_HOST} "/opt/deploy/deploy.sh"
  environment:
    name: dev
    url: https://${DEV_HOST}/admin/
  only:
    - master

.deploy_k8s:
  image: dtzar/helm-kubectl
  stage: deploy
  dependencies: []
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
  before_script:
    - kubectl config set-cluster prod --server="${K8S_URL}" --insecure-skip-tls-verify
    - kubectl config set-credentials deploy --token="$K8S_TOKEN"
    - kubectl config set-context default-context --cluster=prod --user=deploy
    - kubectl config use-context default-context
    - helm init --client-only
    - cd deploy/helm
    - helm repo update
  script:
    - export RELEASE_NAME=backend
    - export DEPLOYS=$(helm ls | grep $RELEASE_NAME | wc -l)
    - if [ ${DEPLOYS}  -eq 0 ]; then helm install --set image.tag=$CI_PIPELINE_IID --name=${RELEASE_NAME} . ; else helm upgrade  ${RELEASE_NAME} --set image.tag=$CI_PIPELINE_IID .; fi
  environment:
    name: dev
    url: https://${DEV_HOST}
  only:
  - master

