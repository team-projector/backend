# Generated by Django 3.1.2 on 2020-11-23 07:08

from django.db import migrations
from django.db.models import Count
from apps.development.models.project_member import ProjectMemberRole


def merge_project_members_roles(apps, schema_editor):
    ProjectMember = apps.get_model("development", "ProjectMember")

    members = ProjectMember.objects.values(
        "user_id",
        "object_id",
        "content_type_id",
    ).annotate(members_count=Count("user_id")).filter(members_count__gt=1)

    for member in members:
        _merge_project_member_roles(member, ProjectMember)


def _merge_project_member_roles(project_member, ProjectMember):
    members = ProjectMember.objects.filter(
        user_id=project_member["user_id"],
        object_id=project_member["object_id"],
        content_type_id=project_member["content_type_id"],
    )
    roles_for_set = _get_roles(
        members.values_list("role", flat=True),
        ProjectMember,
    )
    members.update(roles=roles_for_set)

    _clear_members(members)


def _get_roles(roles, ProjectMember):
    roles_map = _get_roles_map(ProjectMember)

    role = roles_map.get(roles[0])
    for _role in roles[1:]:
        role = (role | roles_map.get(_role))

    return role


def _get_roles_map(ProjectMember):
    return {
        ProjectMemberRole.MANAGER: ProjectMember.roles.MANAGER,
        ProjectMemberRole.DEVELOPER: ProjectMember.roles.DEVELOPER,
        ProjectMemberRole.CUSTOMER: ProjectMember.roles.CUSTOMER,
    }


def _clear_members(members):
    member_for_save = members.order_by("id").first()
    members.exclude(id=member_for_save.id).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('development', '0092_fill_project_member_roles'),
    ]

    operations = [
        migrations.RunPython(merge_project_members_roles),
    ]
